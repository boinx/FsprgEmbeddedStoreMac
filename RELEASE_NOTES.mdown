<html>
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8">
<title>Release Notes FsprgEmbeddedStoreSDK</title>
<link rel='stylesheet' href='HOW_TO/style.css' type='text/css'/>
</head>
<body>

<img id="logo" src="HOW_TO/fastspring_logo.png"/>

<h1 id='header'>FastSpring Embedded Store SDK<br/>Release Notes</h1>

# Release 1.0.8 #

## Solved interference with Safari Plugins

Safari Plugins which intercepts the text/xml and application/xml content types got in the way of our Embedded Store interception while showing the order confirmation. Customers saw the source (plist) instead of the order confirmation view. We switched the content type to application/x-fsprgorder+xml to prevent any interference with Safari Plugins.


# Release 1.0.7 #

## Providing SubscriptionReference

`FsprgOrderItem` provides a subscriptionReference attribute if the order was a subscription. This reference can be used to make calls to FastSpring's [Subscription API](https://support.fastspring.com/entries/236487-api-subscriptions).

	@interface FsprgOrderItem : NSObject {
	...
	- (NSString *)subscriptionReference;
	...


# Release 1.0.6 #

## Coupon Parameter ##

`FsprgStoreParameters` has now a coupon parameter.

	/*!
	 * Pass a coupon code via the URL to automatically apply a coupon to the order so that the customer 
	 * does not need to enter it. A corresponding coupon code must be setup and associated with a promotion.
	 * Example: DECSPECIAL987
	 */
	- (NSString *)coupon;
	- (void)setCoupon:(NSString *)aCoupon;

## Order total and item total in USD ##

`FsprgOrder` and `FsprgOrderItem` provide now totals in USD.

	@interface FsprgOrder : NSObject {
	...
	- (NSNumber *)orderTotalUSD;
	...
	
	@interface FsprgOrderItem : NSObject {
	...
	- (NSNumber *)itemTotal;
	- (NSNumber *)itemTotalUSD;
	...

	

# Release 1.0.5 #

## Moved to GitHub ##

FastSpring's Embedded Store is now hosted on [GitHub](http://www.github.com).



# Release 1.0.4 #

## Error Handling ##

There wasn't a way to be notified of errors (e.g. no network connection) from FsprgEmbeddedStore. All you got was a blank white page inside the WebView.

`FsprgEmbeddedStoreDelegate` provides now two new methods to notify the user of any errors. Example1 and Example2 contain an example implementation.

	@protocol FsprgEmbeddedStoreDelegate <NSObject>
		...
		- (void)webView:(WebView *)sender didFailProvisionalLoadWithError:(NSError *)error forFrame:(WebFrame *)frame;
		- (void)webView:(WebView *)sender didFailLoadWithError:(NSError *)error forFrame:(WebFrame *)frame;
	@end



# Release 1.0.3 #

## URL on didLoadStore and didLoadPage ##
Enhanced `FsprgEmbeddedStoreDelegate didLoadStore` and added `FsprgEmbeddedStoreDelegate didLoadPage`.

	typedef enum {
		FsprgPageFS,
		FsprgPagePayPal,
		FsprgPageUnknown
	} FsprgPageType;

	@protocol FsprgEmbeddedStoreDelegate <NSObject>
		- (void)didLoadStore:(NSURL *)url;
		- (void)didLoadPage:(NSURL *)url ofType:(FsprgPageType)pageType;
		- (void)didReceiveOrder:(FsprgOrder *)order;
		- (NSView *)viewWithFrame:(NSRect)frame forOrder:(FsprgOrder *)order;
	@end

`didLoadPage` will be called on every subsequent page load after `didLoadStore`. It gives the possibility to monitor the URL and resize the window appropriately based on the URL.

## WebKit Inspector ##

Test.app sets the property to enable WebKit's Web Inspector. It can be opened by right clicking anywhere on the web frame and choosing Inspect Element. See also [http://trac.webkit.org/wiki/WebInspector](http://trac.webkit.org/wiki/WebInspector).



# Release 1.0.2 #

## In-lined with Cocoa's memory management idioms ##

`FsprgEmbeddedStoreController setDelegate` keeps a weak reference to delegates to prevent circular references. See also [Apple Documentation](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmObjectOwnership.html#//apple_ref/doc/uid/20000043-1044135).



# Release 1.0.1 #

## Order Confirmation MacOS 10.5 ##

Fixed: Order Confirmation View didn't show up on MacOS 10.5.

</body></html>